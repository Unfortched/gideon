Доброго времени суток. Меня зовут Зубаиров Марат.

Решил тестовое задание и принял решение составить к нему краткое описание для простоты восприятия (не судите строго).

Задание:

Написать программу для автомойки. Одновременно может обслуживаться только один автомобиль. 
Есть список услуг, который могут выбрать клиенты. Каждая услуга выполняется N минут. 
Написать программу, в которой клиенты могут записываться на мойку и смотреть свое место в очереди или сколько им ждать своего времени. 
Без предварительной записи. Интерфейс по желанию, если без интерфейса использовать сваггер для запросов. 
Для хранения данных использовать PostgreSQL.

Расшарить в гите и прислать ссылку.
На выполнение задания дается 3 дня (до 08.03.2021 включительно), далее присылаете, что сделали.

Небольшой пролог:

Программа составлена в среде Intellij IDEA с использованием Java Swing для интерфейса, PostgreSQL для хранения данных и
JDBCTemplate для работы с запросами. Все необходимые зависимости указаны в Maven-файле. Лично от себя хотел добавить, что задача
не является очень сложной и для её решения существует огромное множество решений, но для простоты и соответствии временному промежутку
на её выполнение был выбран самый прямолинейный, на мой взгляд, способ. Подробнее о проекте я написал ниже.

Описание базы данных:

Как и было указано в задании была использована БД PostgreSQL. В качестве основы для хранения данных была
использована простая таблица Customers.

CREATE TABLE customers
(
    id SERIAL PRIMARY KEY,    	// первичный ключ
    name char(50) NOT NULL,	// имя клиента
    services int NOT NULL,	// выбранные услуги
    time timestamp not null default '2850-12-01 00:00:00' // время для обслуживания, по умолчанию выставил большое значение
);

Также была создана процедура, которая и выполняет основные манипуляции с обслуживание клиента по времени:

CREATE OR REPLACE PROCEDURE public.last_person_time()
    LANGUAGE 'plpgsql'
    
AS $BODY$
declare max Integer;
declare lastId Integer;
begin
max:= (select count(*) from customers);
lastId:= (select max(id) from customers);
	 UPDATE customers SET time = now() + services*interval '1 minute' where id = lastId;
		IF (max) > 1 THEN
      update customers SET time = (select time from customers where id = lastId-1) +
									CAST(services||' minutes' as Interval) where id = (lastId);	
   END IF;
end;$BODY$;


Непосредственно программа состоит из 6 классов:

Customer - класс клиента, реализует основные поля;
CustomerMapper - класс преобразования данных запроса в класс клиента;
CustomerTable - класс таблицы для корректного отображения данных о клиентах (сделал для лаконичного вывода и удобства);
Main - основной класс запуска программы (большой смысловой нагрузки, кроме создания формы, не несет);
OrderDao - класс общения с базой данных, реализован с использованием JDBCTemplate. 
	Основные функции:
		*добавление клиента;
		*вывод списка всех клиентов;
		*удаления всех данных из рабочей таблицы (используется при запуске программы для соответствия условию "без предварительной записи");
		*удаление клиентов, временное поле которого (time) перестает соответствовать текущему времени;
		*обслуживание клиента (вызов для него процедуры).
OrderForm - класс формы, в котором и происходит основное взаимодействие всех элементов, а также данные для OrderDao необходимые для подключения.
(Вынес эту информацию в класс формы, так как JDBCTemplate "учит" внедрению зависимостей извне).

Для запуска программы необходимо запустить метод main одноименного класса. Откроется форма, которая состоит из следующих элементов:
	-поле ввода имени клиента;
	-блок чекбоксов для указание услуг (в скобках указано действительное время для выполнения, при указании нескольких время суммируется);
	-кнопка создания заказа;
	-кнопка выхода из приложения;
	-окно "электронной очереди" (пытался сделать лаконичной, простой и похожей на настоящую электронную очередь хотя бы по содержимому);
	-надписи для обозначения элементов, в том числе надпись обработки текущего клиента.

Для создания заказа необходимо заполнить поле имени клиента и выбрать одну (или несколько) услуг. Время на их выполнение считается суммой (что вполне логично).
Все заказы отображаются в правой части по мере их занесения в базу данных. Выполняются по одному, сначала первый, остальное является очередью.
Обновление интерфейса, как и удаление выполненных заказов из базы данных было реализовано через таймер с промежутком в одну секунду.
Было бы логично сделать раз в минуту, так как время выполнения каждой услуги исчисляется в минутах, но тогда это задело бы отрисовку новых клиентов
в таблице очереди (тестирование проходило с обновление по секунде).

Спасибо за внимание.

С уважением,
Зубаиров Марат.